{
  "name": "clang-format",
  "displayName": "Clang-Format",
  "description": "Use Clang-Format in Visual Studio Code",
  "version": "2.0.0",
  "publisher": "ebendler",
  "engines": {
    "vscode": "^1.96.0"
  },
  "galleryBanner": {
    "color": "#005577",
    "theme": "dark"
  },
  "dependencies": {
    "@types/which": "^3.0.4",
    "sax": "^1.4.1",
    "which": "^5.0.0"
  },
  "categories": [
    "Formatters"
  ],
  "keywords": [
    "C++",
    "JavaScript",
    "Objective-C",
    "Clang",
    "LLVM",
    "Protobuf",
    "CUDA",
    "TableGen",
    "Metal"
  ],
  "activationEvents": [
    "onLanguage:cpp",
    "onLanguage:c",
    "onLanguage:csharp",
    "onLanguage:objective-c",
    "onLanguage:objective-cpp",
    "onLanguage:java",
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:proto",
    "onLanguage:proto3",
    "onLanguage:textproto",
    "onLanguage:apex",
    "onLanguage:glsl",
    "onLanguage:hlsl",
    "onLanguage:cuda",
    "onLanguage:cuda-cpp",
    "onLanguage:tablegen",
    "onLanguage:metal"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Clang-Format configuration",
      "properties": {
        "clang-format.executable": {
          "type": "string",
          "default": "clang-format",
          "description": "clang-format executable path",
          "scope": "resource"
        },
        "clang-format.executable.windows": {
          "type": "string",
          "default": "",
          "description": "clang-format executable path on Windows",
          "scope": "resource"
        },
        "clang-format.executable.linux": {
          "type": "string",
          "default": "",
          "description": "clang-format executable path on Linux",
          "scope": "resource"
        },
        "clang-format.executable.osx": {
          "type": "string",
          "default": "",
          "description": "clang-format executable path on macOS",
          "scope": "resource"
        },
        "clang-format.style": {
          "type": "string",
          "default": "file",
          "description": "clang-format style.(-style=value, value can be file, LLVM, Google, Chromium, Mozilla, WebKit or json configure)",
          "scope": "resource"
        },
        "clang-format.fallbackStyle": {
          "type": "string",
          "default": "LLVM",
          "description": "clang-format fallback style.(-fallback-style=value, value can be none, LLVM, Google, Chromium, Mozilla, WebKit)",
          "scope": "resource"
        },
        "clang-format.language.cpp.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for C++ (requires reloading Visual Studio Code)"
        },
        "clang-format.language.cpp.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for C++, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.cpp.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for C++, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.c.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for C (requires reloading Visual Studio Code)"
        },
        "clang-format.language.c.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for C, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.c.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for C, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.csharp.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for C# (requires reloading Visual Studio Code)"
        },
        "clang-format.language.csharp.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for C#, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.csharp.fallbackStyle": {
          "type": "string",
          "default": "Microsoft",
          "description": "clang-format fallback style for C#, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.objective-c.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for Objective-C (requires reloading Visual Studio Code)"
        },
        "clang-format.language.objective-c.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Objective-C, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.objective-c.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Objective-C, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.objective-cpp.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for Objective-C++ (requires reloading Visual Studio Code)"
        },
        "clang-format.language.objective-cpp.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Objective-C++, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.objective-cpp.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Objective-C++, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.java.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for Java (requires reloading Visual Studio Code)"
        },
        "clang-format.language.java.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Java, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.java.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Java, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.javascript.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for JavaScript (requires reloading Visual Studio Code)"
        },
        "clang-format.language.javascript.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for JavaScript, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.javascript.fallbackStyle": {
          "type": "string",
          "default": "google",
          "description": "clang-format fallback style for JavaScript",
          "scope": "resource"
        },
        "clang-format.language.typescript.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for TypeScript (requires reloading Visual Studio Code)"
        },
        "clang-format.language.typescript.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for TypeScript, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.typescript.fallbackStyle": {
          "type": "string",
          "default": "google",
          "description": "clang-format fallback style for TypeScript",
          "scope": "resource"
        },
        "clang-format.language.proto.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for Protobuf (requires reloading Visual Studio Code)"
        },
        "clang-format.language.proto.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Protobuf, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.proto.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Protobuf, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.textproto.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for textproto files"
        },
        "clang-format.language.textproto.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for textproto, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.textproto.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for textproto, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.apex.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for Apex (requires reloading Visual Studio Code)"
        },
        "clang-format.language.apex.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Apex, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.apex.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Apex, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.glsl.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for GLSL (requires reloading Visual Studio Code)"
        },
        "clang-format.language.glsl.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for GLSL, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.glsl.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for GLSL, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.hlsl.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for HLSL (requires reloading Visual Studio Code)"
        },
        "clang-format.language.hlsl.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for HLSL, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.hlsl.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for HLSL, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.cuda.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for CUDA (requires reloading Visual Studio Code)"
        },
        "clang-format.language.cuda.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for CUDA, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.cuda.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for CUDA, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.cuda-cpp.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for CUDA (requires reloading Visual Studio Code)"
        },
        "clang-format.language.cuda-cpp.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for CUDA, left empty to use clang-format.style",
          "scope": "resource"
        },
        "clang-format.language.cuda-cpp.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for CUDA C++, left empty to use clang-format.fallbackStyle",
          "scope": "resource"
        },
        "clang-format.language.tablegen.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for TableGen (requires reloading Visual Studio Code)"
        },
        "clang-format.language.teblegen.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for TableGen, left empty to use clang-format.style"
        },
        "clang-format.language.teblegen.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for TableGen, left empty to use clang-format.fallbackStyle"
        },
        "clang-format.language.metal.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable formatting for Metal Shader Files"
        },
        "clang-format.language.metal.style": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Metal Shader Files, left empty to use clang-format.style"
        },
        "clang-format.language.metal.fallbackStyle": {
          "type": "string",
          "default": "",
          "description": "clang-format fallback style for Metal Shader Files, left empty to use clang-format.fallbackStyle"
        },
        "clang-format.assumeFilename": {
          "type": "string",
          "default": "",
          "description": "When reading from stdin, clang-format assumes this filename to look for a style config file (with -style=file) and to determine the language.",
          "scope": "resource"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint \"src/**/*.ts\"",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "^20.x",
    "@types/sax": "^1.2.7",
    "@types/vscode": "^1.96.0",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.3.2",
    "esbuild": "^0.25.1",
    "eslint": "^9.23.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.2"
  },
  "icon": "clang-format.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/a5ehren/vscode-clang-format"
  },
  "license": "MIT"
}
